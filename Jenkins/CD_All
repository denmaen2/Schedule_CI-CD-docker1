pipeline {
    agent {
        label 'my_node' 
    }
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['development', 'staging', 'production'], description: 'Target environment')
        string(name: 'ECR_TAG', defaultValue: 'latest', description: 'ECR image tag')
        string(name: 'DOMAIN_TOKEN', defaultValue: 'https://denys-kucher-schedule.xyz/api', description: 'Domain token')
        choice(name: 'DEPLOYMENT_TARGET', choices: ['all', 'frontend-only', 'backend-only', 'proxy-only'], description: 'What to deploy')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Test run')
        string(name: 'DB_SECRET_NAME', defaultValue: '', description: 'Override: Database secret name (auto-discovered if empty)')
        string(name: 'DB_HOST', defaultValue: '', description: 'Override: Database host')
        string(name: 'REDIS_HOST', defaultValue: '', description: 'Override: Redis host')
        string(name: 'BACKEND_PRIVATE_IP', defaultValue: '', description: 'Override: Backend server private IP (auto-discovered if empty)')
        string(name: 'FRONTEND_PRIVATE_IP', defaultValue: '', description: 'Override: Frontend server private IP (auto-discovered if empty)')
    }
    
    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '394094767544'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        ECR_REPO_FRONTEND = 'frontend-app'
        ECR_REPO_BACKEND = 'backend-app'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        PROJECT_PATH = '/home/denys/Downloads/product6_with_docker1'
        DOMAIN_TOKEN = "${params.DOMAIN_TOKEN}"
    }
    
    stages {
        stage('Test AWS Access') {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-ecr-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ],
                ]) {
                    script {
                        echo "🔍 Testing AWS access..."
                        
                        try {
                            // Test basic AWS access
                            def awsIdentity = sh(
                                script: 'aws sts get-caller-identity --region $AWS_REGION --output json',
                                returnStdout: true
                            ).trim()
                            echo "✅ AWS access confirmed: ${awsIdentity}"
                            
                            // Test Secrets Manager access
                            def secretsTest = sh(
                                script: 'aws secretsmanager list-secrets --region $AWS_REGION --max-items 1 --output text 2>/dev/null || echo "ERROR"',
                                returnStdout: true
                            ).trim()
                            
                            if (secretsTest.contains("ERROR")) {
                                error "❌ Cannot access AWS Secrets Manager! Check permissions."
                            }
                            echo "✅ Secrets Manager access confirmed"
                            
                            // Test EC2 access (needed for IP discovery)
                            def ec2Test = sh(
                                script: 'aws ec2 describe-instances --region $AWS_REGION --max-items 1 --output text 2>/dev/null || echo "ERROR"',
                                returnStdout: true
                            ).trim()
                            
                            if (ec2Test.contains("ERROR")) {
                                echo "⚠️ Limited EC2 access - IP auto-discovery may fail"
                            } else {
                                echo "✅ EC2 access confirmed"
                            }
                            
                        } catch (Exception e) {
                            error """
                            ❌ AWS access failed!
                            
                            Error: ${e.getMessage()}
                            
                            Please check:
                            1. Jenkins AWS credentials are correctly configured
                            2. Credentials have required permissions:
                               - secretsmanager:ListSecrets
                               - secretsmanager:GetSecretValue
                               - rds:DescribeDBInstances
                               - rds:DescribeDBClusters
                               - elasticache:DescribeCacheClusters
                               - ec2:DescribeInstances (for IP discovery)
                            """
                        }
                    }
                }
            }
        }
        
        stage('Discover Infrastructure') {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-ecr-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ],
                ]) {
                    script {
                        echo "🔍 Discovering infrastructure components..."
                        
                        // Discover Backend Private IP
                        def backendPrivateIp = params.BACKEND_PRIVATE_IP
                        if (!backendPrivateIp) {
                            echo "🤖 Auto-discovering backend private IP..."
                            
                            backendPrivateIp = sh(
                                script: '''
                                    # Look for instances with backend-related tags or names
                                    BACKEND_IP=$(aws ec2 describe-instances --region $AWS_REGION \
                                        --filters "Name=instance-state-name,Values=running" \
                                        --query 'Reservations[].Instances[?Tags[?Key==`Name` && (contains(Value, `backend`) || contains(Value, `Backend`) || contains(Value, `api`))]].PrivateIpAddress' \
                                        --output text 2>/dev/null | head -n1)
                                    
                                    if [ -n "$BACKEND_IP" ] && [ "$BACKEND_IP" != "None" ]; then
                                        echo "$BACKEND_IP"
                                    else
                                        # Fallback: look for instances with backend in security group
                                        aws ec2 describe-instances --region $AWS_REGION \
                                            --filters "Name=instance-state-name,Values=running" \
                                            --query 'Reservations[].Instances[?SecurityGroups[?contains(GroupName, `backend`) || contains(GroupName, `Backend`)]].PrivateIpAddress' \
                                            --output text 2>/dev/null | head -n1 || echo ""
                                    fi
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (backendPrivateIp) {
                                echo "✅ Auto-discovered backend IP: ${backendPrivateIp}"
                            } else {
                                echo "⚠️ Could not auto-discover backend IP - manual specification required"
                            }
                        } else {
                            echo "🎯 Using manually specified backend IP: ${backendPrivateIp}"
                        }
                        
                        // Discover Frontend Private IP
                        def frontendPrivateIp = params.FRONTEND_PRIVATE_IP
                        if (!frontendPrivateIp) {
                            echo "🤖 Auto-discovering frontend private IP..."
                            
                            frontendPrivateIp = sh(
                                script: '''
                                    # Look for instances with frontend-related tags or names
                                    FRONTEND_IP=$(aws ec2 describe-instances --region $AWS_REGION \
                                        --filters "Name=instance-state-name,Values=running" \
                                        --query 'Reservations[].Instances[?Tags[?Key==`Name` && (contains(Value, `frontend`) || contains(Value, `Frontend`) || contains(Value, `web`))]].PrivateIpAddress' \
                                        --output text 2>/dev/null | head -n1)
                                    
                                    if [ -n "$FRONTEND_IP" ] && [ "$FRONTEND_IP" != "None" ]; then
                                        echo "$FRONTEND_IP"
                                    else
                                        # Fallback: look for instances with frontend in security group
                                        aws ec2 describe-instances --region $AWS_REGION \
                                            --filters "Name=instance-state-name,Values=running" \
                                            --query 'Reservations[].Instances[?SecurityGroups[?contains(GroupName, `frontend`) || contains(GroupName, `Frontend`)]].PrivateIpAddress' \
                                            --output text 2>/dev/null | head -n1 || echo ""
                                    fi
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (frontendPrivateIp) {
                                echo "✅ Auto-discovered frontend IP: ${frontendPrivateIp}"
                            } else {
                                echo "⚠️ Could not auto-discover frontend IP - manual specification required"
                            }
                        } else {
                            echo "🎯 Using manually specified frontend IP: ${frontendPrivateIp}"
                        }
                        
                        // Set environment variables
                        env.BACKEND_PRIVATE_IP = backendPrivateIp
                        env.FRONTEND_PRIVATE_IP = frontendPrivateIp
                        
                        // Validate that we have the required IPs based on deployment target
                        def missingIps = []
                        if (params.DEPLOYMENT_TARGET in ['all', 'backend-only'] && !env.BACKEND_PRIVATE_IP) {
                            missingIps.add("backend")
                        }
                        if (params.DEPLOYMENT_TARGET in ['all', 'frontend-only'] && !env.FRONTEND_PRIVATE_IP) {
                            missingIps.add("frontend")
                        }
                        
                        if (missingIps) {
                            error """
                            ❌ Missing required private IPs: ${missingIps.join(', ')}
                            
                            Private IP discovery failed. Please either:
                            1. Use BACKEND_PRIVATE_IP and/or FRONTEND_PRIVATE_IP parameters
                            2. Ensure your EC2 instances have proper tags:
                               - Name tag containing 'backend', 'Backend', or 'api' for backend servers
                               - Name tag containing 'frontend', 'Frontend', or 'web' for frontend servers
                            3. Check AWS credentials have ec2:DescribeInstances permission
                            
                            Current deployment target: ${params.DEPLOYMENT_TARGET}
                            """
                        }
                        
                        echo """
                        🎯 Infrastructure Configuration:
                        - Backend Private IP: ${env.BACKEND_PRIVATE_IP ?: 'Not required for this deployment'}
                        - Frontend Private IP: ${env.FRONTEND_PRIVATE_IP ?: 'Not required for this deployment'}
                        - Deployment Target: ${params.DEPLOYMENT_TARGET}
                        """
                    }
                }
            }
        }
        
        stage('Discover and Retrieve Secrets') {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-ecr-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ],
                ]) {
                    script {
                        echo "🔍 Discovering AWS secrets..."
                        
                        // Get all available secrets for debugging
                        def allSecrets = sh(
                            script: 'aws secretsmanager list-secrets --region $AWS_REGION --query "SecretList[].Name" --output text 2>/dev/null || echo ""',
                            returnStdout: true
                        ).trim()
                        
                        echo "📋 Available secrets: ${allSecrets ? allSecrets.replace('\t', ', ') : 'None found'}"
                        
                        // Determine which secret to use
                        def dbSecretName = params.DB_SECRET_NAME
                        if (!dbSecretName) {
                            echo "🤖 Auto-discovering database secret..."
                            
                            if (!allSecrets) {
                                error """
                                ❌ No secrets found in AWS Secrets Manager!
                                
                                Please either:
                                1. Create a secret in AWS Secrets Manager with your database credentials
                                2. Use the DB_SECRET_NAME parameter to specify an exact secret name
                                3. Check AWS credentials have SecretsManager:ListSecrets permission
                                """
                            }
                            
                            // Try different discovery strategies
                            dbSecretName = sh(
                                script: '''
                                    # Strategy 1: Look for database-related names
                                    RESULT=$(echo "''' + allSecrets + '''" | tr '\t' '\n' | grep -iE "(database|db|postgres|rds)" | head -n1)
                                    if [ -n "$RESULT" ]; then
                                        echo "$RESULT"
                                        exit 0
                                    fi
                                    
                                    # Strategy 2: Look for AWS pattern
                                    RESULT=$(echo "''' + allSecrets + '''" | tr '\t' '\n' | grep -E "aws-secret-[0-9]+" | head -n1)
                                    if [ -n "$RESULT" ]; then
                                        echo "$RESULT"
                                        exit 0
                                    fi
                                    
                                    # Strategy 3: Use first available
                                    echo "''' + allSecrets + '''" | tr '\t' '\n' | head -n1
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (dbSecretName) {
                                echo "✅ Auto-selected secret: ${dbSecretName}"
                            }
                        } else {
                            echo "🎯 Using manually specified secret: ${dbSecretName}"
                        }
                        
                        if (!dbSecretName) {
                            error """
                            ❌ No valid secret found!
                            
                            Available secrets: ${allSecrets ?: 'None'}
                            
                            Please specify DB_SECRET_NAME parameter or create a secret in AWS Secrets Manager.
                            """
                        }
                        
                        echo "🔑 Using secret: ${dbSecretName}"
                        
                        // Retrieve and parse the secret
                        sh """
                            echo "📖 Retrieving secret: ${dbSecretName}"
                            
                            # Verify secret exists
                            if ! aws secretsmanager describe-secret --secret-id '${dbSecretName}' --region \$AWS_REGION >/dev/null 2>&1; then
                                echo "❌ Secret '${dbSecretName}' not found!"
                                exit 1
                            fi
                            
                            # Get secret value
                            SECRET_JSON=\$(aws secretsmanager get-secret-value --secret-id '${dbSecretName}' --region \$AWS_REGION --query SecretString --output text)
                            echo "✅ Secret retrieved successfully"
                            
                            # Show secret structure (without sensitive values)
                            echo "🔍 Secret structure:"
                            echo \$SECRET_JSON | jq 'keys' || echo "Could not parse as JSON"
                            
                            # Parse values with multiple field name options
                            echo \$SECRET_JSON | jq -r '.db_name // .database_name // .database // empty' > /tmp/db_name.txt
                            echo \$SECRET_JSON | jq -r '.db_username // .username // .user // empty' > /tmp/db_username.txt
                            echo \$SECRET_JSON | jq -r '.db_password // .password // empty' > /tmp/db_password.txt
                            echo \$SECRET_JSON | jq -r '.db_host // .host // .endpoint // empty' > /tmp/db_host.txt
                            
                            echo "📊 Extracted values:"
                            echo "  db_name: \$(cat /tmp/db_name.txt)"
                            echo "  db_username: \$(cat /tmp/db_username.txt)"
                            echo "  db_password: [HIDDEN]"
                            echo "  db_host: \$(cat /tmp/db_host.txt)"
                        """
                        
                        // Read parsed values
                        def dbName = sh(script: 'cat /tmp/db_name.txt', returnStdout: true).trim()
                        def dbUsername = sh(script: 'cat /tmp/db_username.txt', returnStdout: true).trim()
                        def dbPassword = sh(script: 'cat /tmp/db_password.txt', returnStdout: true).trim()
                        def dbHostFromSecret = sh(script: 'cat /tmp/db_host.txt', returnStdout: true).trim()
                        
                        // Auto-discover database endpoint if needed
                        def dbHost = params.DB_HOST ?: dbHostFromSecret
                        if (!dbHost) {
                            echo "🤖 Auto-discovering PostgreSQL endpoint..."
                            
                            // Try RDS PostgreSQL
                            dbHost = sh(
                                script: '''
                                    aws rds describe-db-instances --region $AWS_REGION \
                                        --query 'DBInstances[?Engine==`postgres`].Endpoint.Address' \
                                        --output text 2>/dev/null | head -n1 || echo ""
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (dbHost) {
                                echo "✅ Found RDS PostgreSQL: ${dbHost}"
                            } else {
                                // Try Aurora PostgreSQL
                                dbHost = sh(
                                    script: '''
                                        aws rds describe-db-clusters --region $AWS_REGION \
                                            --query 'DBClusters[?Engine==`aurora-postgresql`].Endpoint' \
                                            --output text 2>/dev/null | head -n1 || echo ""
                                    ''',
                                    returnStdout: true
                                ).trim()
                                
                                if (dbHost) {
                                    echo "✅ Found Aurora PostgreSQL: ${dbHost}"
                                }
                            }
                        }
                        
                        // Auto-discover Redis endpoint if needed
                        def redisHost = params.REDIS_HOST
                        if (!redisHost || redisHost == "localhost") {
                            echo "🤖 Auto-discovering Redis endpoint..."
                            
                            redisHost = sh(
                                script: '''
                                    # Try ElastiCache Redis clusters
                                    REDIS=$(aws elasticache describe-cache-clusters --region $AWS_REGION \
                                        --show-cache-node-info \
                                        --query 'CacheClusters[?Engine==`redis`].CacheNodes[0].Endpoint.Address' \
                                        --output text 2>/dev/null | head -n1)
                                    
                                    if [ -n "$REDIS" ] && [ "$REDIS" != "None" ]; then
                                        echo "$REDIS"
                                    else
                                        # Try Redis Replication Groups
                                        aws elasticache describe-replication-groups --region $AWS_REGION \
                                            --query 'ReplicationGroups[0].PrimaryEndpoint.Address' \
                                            --output text 2>/dev/null | head -n1 || echo "localhost"
                                    fi
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (redisHost && redisHost != "localhost") {
                                echo "✅ Found Redis endpoint: ${redisHost}"
                            } else {
                                echo "⚠️ No Redis found, using localhost"
                                redisHost = "localhost"
                            }
                        }
                        
                        // Set environment variables
                        env.DATABASE_TOCKEN = dbName
                        env.USERNAME_TOCKEN = dbUsername
                        env.USERPASSWORD_TOCKEN = dbPassword
                        env.ENDPOINT_TOCKEN_POSTGRES = dbHost
                        env.ENDPOINT_TOCKEN_REDIS = redisHost
                        env.DISCOVERED_SECRET_NAME = dbSecretName
                        
                        // Validate required fields
                        def missing = []
                        if (!env.DATABASE_TOCKEN) missing.add("db_name")
                        if (!env.USERNAME_TOCKEN) missing.add("db_username")
                        if (!env.USERPASSWORD_TOCKEN) missing.add("db_password")
                        if (!env.ENDPOINT_TOCKEN_POSTGRES) missing.add("db_host")
                        
                        if (missing) {
                            error """
                            ❌ Missing required fields: ${missing.join(', ')}
                            
                            Secret '${dbSecretName}' validation:
                            - db_name: ${env.DATABASE_TOCKEN ? '✅' : '❌ Missing'}
                            - db_username: ${env.USERNAME_TOCKEN ? '✅' : '❌ Missing'}
                            - db_password: ${env.USERPASSWORD_TOCKEN ? '✅' : '❌ Missing'}
                            - db_host: ${env.ENDPOINT_TOCKEN_POSTGRES ? '✅' : '❌ Missing (auto-discovery failed)'}
                            
                            Your secret should contain JSON like:
                            {
                                "db_name": "mydb",
                                "db_username": "postgres",
                                "db_password": "postgres123",
                                "db_host": "your-host.rds.amazonaws.com" (optional - can be auto-discovered)
                            }
                            
                            Use DB_HOST parameter if auto-discovery fails.
                            """
                        }
                        
                        echo """
                        ✅ Configuration ready:
                        - Secret: ${dbSecretName}
                        - Database: ${env.DATABASE_TOCKEN}
                        - Username: ${env.USERNAME_TOCKEN}
                        - DB Host: ${env.ENDPOINT_TOCKEN_POSTGRES} ${dbHost == dbHostFromSecret ? '(from secret)' : dbHost == params.DB_HOST ? '(manual)' : '(auto-discovered)'}
                        - Redis Host: ${env.ENDPOINT_TOCKEN_REDIS} ${redisHost == params.REDIS_HOST ? '(manual)' : '(auto-discovered)'}
                        """
                        
                        // Cleanup temp files
                        sh 'rm -f /tmp/db_*.txt'
                    }
                }
            }
        }
 
        stage('Deploy') {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-ecr-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ],
                ]) {
                    dir("${env.PROJECT_PATH}/ansible") {
                        sh '''
                            if [ -d "venv" ]; then
                                . venv/bin/activate
                            fi
                            
                            echo "🚀 Starting deployment with discovered configuration:"
                            echo "  Secret: $DISCOVERED_SECRET_NAME"
                            echo "  Database: $DATABASE_TOCKEN"
                            echo "  Username: $USERNAME_TOCKEN"
                            echo "  DB Host: $ENDPOINT_TOCKEN_POSTGRES"
                            echo "  Redis Host: $ENDPOINT_TOCKEN_REDIS"
                            echo "  Backend IP: $BACKEND_PRIVATE_IP"
                            echo "  Frontend IP: $FRONTEND_PRIVATE_IP"
                            echo "  ECR Tag: $ECR_TAG"
                            echo "  Target: $DEPLOYMENT_TARGET"
                            echo "  Environment: $ENVIRONMENT"
                            
                            # Export all environment variables for Ansible
                            export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
                            export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
                            export aws_account_id="$AWS_ACCOUNT_ID"
                            export ecr_image_tag="$ECR_TAG"
                            export ECR_REPO_FRONTEND="$ECR_REPO_FRONTEND"
                            export ECR_REPO_BACKEND="$ECR_REPO_BACKEND"
                            export DOMAIN_TOKEN="$DOMAIN_TOKEN"
                            export AWS_REGION="$AWS_REGION"
                            export DATABASE_TOCKEN="$DATABASE_TOCKEN"
                            export USERNAME_TOCKEN="$USERNAME_TOCKEN"
                            export USERPASSWORD_TOCKEN="$USERPASSWORD_TOCKEN"
                            export ENDPOINT_TOCKEN_POSTGRES="$ENDPOINT_TOCKEN_POSTGRES"
                            export ENDPOINT_TOCKEN_REDIS="$ENDPOINT_TOCKEN_REDIS"
                            export BACKEND_PRIVATE_IP="$BACKEND_PRIVATE_IP"
                            export FRONTEND_PRIVATE_IP="$FRONTEND_PRIVATE_IP"
                            
                            # Build Ansible command
                            ANSIBLE_CMD="ansible-playbook -i inventory.ini playbooks/deploy.yml -v"
                            
                            if [ "$DRY_RUN" = "true" ]; then
                                ANSIBLE_CMD="$ANSIBLE_CMD --check"
                                echo "🔍 DRY RUN MODE - No actual changes will be made"
                            fi
                            
                            case "${DEPLOYMENT_TARGET}" in
                                "frontend-only") 
                                    ANSIBLE_CMD="$ANSIBLE_CMD --limit frontend"
                                    echo "🎯 Targeting: Frontend only (IP: $FRONTEND_PRIVATE_IP)"
                                    ;;
                                "backend-only") 
                                    ANSIBLE_CMD="$ANSIBLE_CMD --limit backend"
                                    echo "🎯 Targeting: Backend only (IP: $BACKEND_PRIVATE_IP)"
                                    ;;
                                "proxy-only") 
                                    ANSIBLE_CMD="$ANSIBLE_CMD --limit proxy"
                                    echo "🎯 Targeting: Proxy only"
                                    ;;
                                *)
                                    echo "🎯 Targeting: All components"
                                    echo "   Frontend IP: $FRONTEND_PRIVATE_IP"
                                    echo "   Backend IP: $BACKEND_PRIVATE_IP"
                                    ;;
                            esac
                            
                            echo "▶️ Executing: $ANSIBLE_CMD"
                            $ANSIBLE_CMD
                        '''
                    }
                }
            }
        }
        
        stage('Verify') {
            steps {
                script {
                    if (!params.DRY_RUN) {
                        dir("${env.PROJECT_PATH}/ansible") {
                            sh '''
                                if [ -d "venv" ]; then
                                    . venv/bin/activate
                                fi
                                
                                echo "⏳ Waiting for services to stabilize..."
                                sleep 15
                                
                                echo "🔍 Verifying deployment..."
                                
                                case "${DEPLOYMENT_TARGET}" in
                                    "all"|"frontend-only")
                                        echo "✅ Checking frontend container on $FRONTEND_PRIVATE_IP..."
                                        if ansible frontend -i inventory.ini -m shell -a "docker ps | grep frontend"; then
                                            echo "✅ Frontend container is running on $FRONTEND_PRIVATE_IP"
                                        else
                                            echo "❌ Frontend container check failed on $FRONTEND_PRIVATE_IP"
                                        fi
                                        ;;
                                    "all"|"backend-only")
                                        echo "✅ Checking backend container on $BACKEND_PRIVATE_IP..."
                                        if ansible backend -i inventory.ini -m shell -a "docker ps | grep backend"; then
                                            echo "✅ Backend container is running on $BACKEND_PRIVATE_IP"
                                            echo "📋 Backend container logs (last 10 lines):"
                                            ansible backend -i inventory.ini -m shell -a "docker logs backend-container --tail 10" || echo "Could not retrieve logs"
                                        else
                                            echo "❌ Backend container check failed on $BACKEND_PRIVATE_IP"
                                            echo "🔍 Attempting to get container logs..."
                                            ansible backend -i inventory.ini -m shell -a "docker logs backend-container --tail 20" || echo "No logs available"
                                        fi
                                        ;;
                                    "all"|"proxy-only")
                                        echo "✅ Checking proxy configuration..."
                                        if ansible proxy -i inventory.ini -m shell -a "sudo nginx -t"; then
                                            echo "✅ Proxy configuration is valid"
                                        else
                                            echo "❌ Proxy configuration check failed"
                                        fi
                                        ;;
                                esac
                            '''
                        }
                    } else {
                        echo "🔍 Skipping verification - DRY RUN mode"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo """
            🎉 Deployment completed successfully!
            
            📊 Deployment Summary:
            ═══════════════════════════════════════
            Environment: ${params.ENVIRONMENT}
            Target: ${params.DEPLOYMENT_TARGET}
            ECR Tag: ${params.ECR_TAG}
            
            🔑 Configuration Used:
            Secret: ${env.DISCOVERED_SECRET_NAME}
            Database: ${env.DATABASE_TOCKEN}
            DB Host: ${env.ENDPOINT_TOCKEN_POSTGRES}
            Redis Host: ${env.ENDPOINT_TOCKEN_REDIS}
            Backend IP: ${env.BACKEND_PRIVATE_IP}
            Frontend IP: ${env.FRONTEND_PRIVATE_IP}
            
            🔗 Your application should now be accessible!
            ═══════════════════════════════════════
            """
        }
        failure {
            echo """
            ❌ Deployment failed!
            
            🔍 Troubleshooting Guide:
            ═══════════════════════════════════════
            1. Check 'Test AWS Access' stage for credential issues
            2. Check 'Discover Infrastructure' stage for IP discovery problems
            3. Check 'Discover and Retrieve Secrets' stage for secret problems
            4. Verify your secret contains required fields: db_name, db_username, db_password
            5. Check AWS permissions for SecretsManager, RDS, ElastiCache, and EC2
            6. Review Ansible deployment logs for specific errors
            
            💡 Quick fixes:
            - Use DB_SECRET_NAME parameter to specify exact secret name
            - Use DB_HOST parameter if database auto-discovery fails
            - Use BACKEND_PRIVATE_IP and FRONTEND_PRIVATE_IP parameters for manual IP specification
            - Check that EC2 instances have proper Name tags for auto-discovery
            - Verify RDS/Aurora instances exist in us-east-1 region
            ═══════════════════════════════════════
            """
        }
        always {
            script {
                // Clean up sensitive environment variables
                env.USERPASSWORD_TOCKEN = null
                env.USERNAME_TOCKEN = null
                env.BACKEND_PRIVATE_IP = null
                env.FRONTEND_PRIVATE_IP = null
            }
        }
    }
}
